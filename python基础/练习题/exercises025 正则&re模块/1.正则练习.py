#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
一、正则表达式练习
1、匹配整数或者小数（包括正数和负数）
"""
# [-]?\d+(\.\d+)?

"""
2、匹配年月日日期 格式2018-12-6 ###
"""
# \d{4}-\d{1,2}-\d{1,2}

"""
3、匹配qq号
"""
# [1-9]([0-9]{5,11})
"""
4、11位的电话号码
"""
# [1][3-9]\d{9}

"""
5、长度为8-10位的用户密码 ： 包含数字字母下划线
"""
# \w{8,10}

"""
6、匹配验证码：4位数字字母组成的
"""
# [\dA-Za-z]{4}

"""
7、匹配邮箱地址  ###
"""
# ^[1-9A-Za-z]\w+@\w+\.\w{1,3}

"""
8、1-2*((60-30+(-40/5)*(9-2*5/3+7/3*99/4*2998+10*568/14))-(-4*3)/(16-3*2))
从上面算式中匹配出最内层小括号以及小括号内的表达式   ###
"""
# \(\d+-\d+\*\d+.*\d{2}\)

"""
9、从类似9-2*5/3+7/3*99/4*2998+10*568/14的表达式中匹配出乘法或除法
"""
# \d+[\*/]\d+([\*/]\d+){0,}

"""
10、从类似
\<a>wahaha\</a>
\<b>banana\</b>
\<h1>qqxing\</h1>
这样的字符串中，

自学一下内容，完成10、2)
ret = re.search("<(?P<tag_name>\w+)>\w+</w+>","\<h1>hello\</h1>")
#还可以在分组中利用?<name>的形式给分组起名字
#获取的匹配结果可以直接用group('名字')拿到对应的值
print(ret.group('tag_name'))  #结果 ：h1
print(ret.group())  #结果 ：\<h1>hello\</h1>
"""
"""
1）匹配出\<a>,\<b>,\<h1>这样的内容
"""
# \\<\w{1,2}>
# \\<[^/].*?>

"""
2）匹配出wahaha，banana，qqxing内容。(思考题)
"""
# [^\\<\w{1,2}>]\d*[\\<\w{1,2}>]


import  re
ret = re.search("<(?P<tag_name>\w+)>\w+</w+>","\<h1>hello\</h1>")
print(ret.group('tag_name'))
print(ret.group())



