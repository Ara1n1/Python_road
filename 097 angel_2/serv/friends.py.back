"""
friend_list: 获取好友列表
chat_list: 聊天信息
recv_msg: toy 获取消息
add_req: 添加好友请求信息
req_list: 获取请求列表
"""
import time
from uuid import uuid4

from bson import ObjectId
from flask import Blueprint, jsonify, request

from config import mongo, RET
from tools.BaiduAI import text2audio
from tools.redis_msg import get_msg

friend = Blueprint('friend', __name__)


@friend.route('/friend_list', methods=['post'])
def friend_list():
    user = request.form.to_dict()
    friend_info = mongo.users.find_one({'_id': ObjectId(user.get('_id'))})
    RET = {}
    RET['CODE'] = 0
    RET['MSG'] = '好友查询'
    RET['DATA'] = friend_info.get('friend_list')
    return jsonify(RET)


@friend.route('/chat_list', methods=['post'])
def chat_list():
    # print(request.form)
    chat_info = request.form.to_dict()
    chat_id = chat_info.get('chat_id')
    chat_win = mongo.chats.find_one({'_id': ObjectId(chat_id)})
    RET = {}
    RET['CODE'] = 0
    RET['MSG'] = '查询聊天记录'
    chat_list = chat_win.get('chat_list')
    if len(chat_list) >= 10:
        RET['DATA'] = chat_list[-10:]
    else:
        RET['DATA'] = chat_list
    print(request.form.get('from_user'), request.form.get('to_user'))
    get_msg(request.form.get('from_user'), request.form.get('to_user'))
    return jsonify(RET)


@friend.route('/recv_msg', methods=['post'])
def recv_msg():
    from_user = request.form.get('from_user')
    to_user = request.form.get('to_user')
    chat_info = mongo.chats.find_one({'user_list': {'$all': [from_user, to_user]}})

    # 从redis数据库中获取 未读条数
    count, sender, reciver = get_msg(from_user, to_user)

    # 判断 sender 是 toy 还是 app 并查找 friend_remark 即在 friend_list 中的备注
    type_info = mongo.toys.find_one({'_id': ObjectId(reciver)})

    if type_info:
        sender_info = type_info
    else:
        sender_info = mongo.users.find_one({'_id': ObjectId(reciver)})

    friend_list = sender_info.get('friend_list')

    friend_remark = '小伙伴'
    for friend in friend_list:
        if friend.get('friend_id') == from_user:
            friend_remark = friend.get('friend_remark')
            break

    file_name = text2audio(f'以下是来自{friend_remark}的{count}条消息', filename=f'{uuid4()}.mp3')
    if count != 0:
        ret = chat_info.get('chat_list')[-count:]
        ret.reverse()
        ret.append({"from_user": sender, "chat": file_name, "create_time": time.time()})
    else:
        ret = [{"from_user": sender, "chat": file_name, "create_time": time.time()}]
    return jsonify(ret)


@friend.route('/add_req', methods=['post'])
def add_req():
    request_info = request.form.to_dict()
    # print(request_info)

    add_user = request_info.get('add_user')
    toy_id = request_info.get('toy_id')
    toy = mongo.toys.find_one({'_id': ObjectId(toy_id)})

    # 判断请求方的身份：toy / app
    if request_info.get('add_type') == 'toy':
        add_user = mongo.toys.find_one({'_id': ObjectId(add_user)})
    else:
        add_user = mongo.users.find_one({'_id': ObjectId(add_user)})

    # 构造请求信息
    request_info['nickname'] = add_user.get('baby_name') if add_user.get('baby_name') else add_user.get('nickname')
    request_info['avatar'] = add_user.get('avatar')
    request_info['status'] = 0
    request_info['toy_name'] = toy.get('toy_name')

    # 把请求信息写入数据库
    mongo.request.insert_one(request_info)

    RET['CODE'] = 0
    RET['MSG'] = '添加好友请求成功'
    RET['DATA'] = {}
    # print(RET)
    return jsonify(RET)


@friend.route('/req_list', methods=['post'])
def req_list():
    user_id = request.form.get('user_id')
    user = mongo.users.find_one({'_id': ObjectId(user_id)})
    user_bind_toy_list = user.get('bind_toys')
    request_list = list(mongo.request.find({'toy_id': {'$in': user_bind_toy_list}}))
    for index, req in enumerate(request_list):
        request_list[index]['_id'] = str(req.get('_id'))

    RET['CODE'] = 0
    RET['MSG'] = '查询好友请求'
    RET['DATA'] = request_list
    # print(RET)
    return jsonify(RET)


@friend.route('/ref_req', methods=['post'])
def ref_req():
    # print(request.form)
    req_id = request.form.get('req_id')

    RET = {
        "CODE": 0,
        "MSG": "拒绝添加好友",
        "DATA": {}
    }
    # 更新 request 表中, 请求状态信息
    mongo.request.update_one({'_id': ObjectId(req_id)}, {'$set': {'status': 2}})

    return jsonify(RET)


@friend.route('/acc_req', methods=['post'])
def acc_req():
    # print(request.form)
    req_id = request.form.get('req_id')
    req_info = mongo.request.find_one({'_id': ObjectId(req_id)})
    # print(req_info)
    # 1. 创建聊天 窗口
    chat_win = mongo.chats.insert_one(
        {'user_list': [req_info.get('add_user'), req_info.get('toy_id')], 'chat_list': []})
    chat_id = str(chat_win.inserted_id)
    # print(chat_id)

    # 2. 构造 req_add_toy 的 toy信息名片
    toy = mongo.toys.find_one({'_id': ObjectId(req_info.get('toy_id'))})
    req_add_toy = {
        "friend_id": req_info.get('toy_id'),
        "friend_nick": toy.get('baby_name'),
        "friend_remark": req_info.get('remark'),
        "friend_avatar": toy.get('avatar'),
        "friend_chat": chat_id,
        "friend_type": "toy"
    }
    # 更新添加者的 friend_list
    if req_info.get('add_type') == 'toy':
        mongo.toys.update_one({'_id': ObjectId(req_info.get('add_user'))}, {'$push': {'friend_list': req_add_toy}})
    else:
        mongo.users.update_one({'_id': ObjectId(req_info.get('add_user'))}, {'$push': {'friend_list': req_add_toy}})

    # 3. 构造 toy_add_user 的 user 信息
    toy_add_req = {
        "friend_id": req_info.get('add_user'),
        "friend_nick": req_info.get('nickname'),
        "friend_remark": request.form.get('remark'),
        "friend_avatar": req_info.get('avatar'),
        "friend_chat": chat_id,
        "friend_type": req_info.get('add_type')
    }
    # 更新toy的 friend_list
    mongo.toys.update_one({'_id': ObjectId(req_info.get('toy_id'))}, {'$push': {'friend_list': toy_add_req}})

    # 4. 更新请求状态信息
    mongo.request.update_one({'_id': ObjectId(req_id)}, {'$set': {'status': 1}})

    RET = {
        "CODE": 0,
        "MSG": "同意添加好友",
        "DATA": {}
    }
    return jsonify(RET)
